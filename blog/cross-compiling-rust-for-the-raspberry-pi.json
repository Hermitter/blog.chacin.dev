{"title":"Cross Compiling Rust for the Raspberry Pi","poster":"posts/cross-compiling-rust-for-the-raspberry-pi/poster.png","frontCover":"../posts/cross-compiling-rust-for-the-raspberry-pi/frontCover.png","keywords":"cross compile, rust, raspberry pi, linux","description":"Compile a Rust program on your Linux computer and run it on the Pi","slug":"cross-compiling-rust-for-the-raspberry-pi","html":"<h1>Getting Started</h1>\n<blockquote>\n<p>If you want to automate this process with Docker, take a look at <a href=\"https://github.com/rust-embedded/cross\">cross</a>!</p>\n</blockquote>\n<p>This guide covers how to set up your linux computer to <code>compile</code>, <code>upload</code>, and <code>run</code> a Rust binary on your Raspberry Pi. In order to do this, you'll need to:</p>\n<ul>\n<li>Download the standard library that's compatible with your Pi.</li>\n<li>Download the Linker for the Cortex-A Family.</li>\n<li>Upload &amp; run the binary on your Pi.</li>\n</ul>\n<p>Before moving on, make sure you have a Pi that's <strong>connected to WiFi</strong> and has <strong>SSH enabled</strong>.</p>\n<h2>Install the Standard Library for your Pi</h2>\n<p>Assuming that <a href=\"https://www.rust-lang.org/\">Rust</a> is already installed, download the compatible standard library on your computer.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># Supports Pi 0/1</span>\nrustup target add arm-unknown-linux-gnueabihf\n<span class=\"hljs-comment\"># Supports Pi 2/3/4</span>\nrustup target add armv7-unknown-linux-gnueabihf\n</code></pre>\n<h2>Download the GNU Toolchain</h2>\n<blockquote>\n<p>We're installing this from source to stay distro agnostic.</p>\n</blockquote>\n<p>Next we need to get a compatible Arm linker for Rust to compile against. Download any <strong>Linux</strong> Toolchain version for the desired target.</p>\n<blockquote>\n<p>You may have to search through previous releases to find what you want.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-a/downloads\">GNU Toolchain Downloads</a>\n<ul>\n<li><code>Pi 0/1</code>: <strong>AArch32 target with hard float (arm-linux-gnueabihf)</strong></li>\n<li><code>Pi 2/3/4</code>: <strong>AArch32 target with hard float (arm-none-linux-gnueabihf)</strong></li>\n</ul></li>\n</ul>\n<p>Unzip it, and add the binaries to your <code>$PATH</code>.</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># Add to your .bashrc, .zshrc, config.fish, .profile, etc..</span>\n<span class=\"hljs-comment\"># Pi 0/1 Example: export PATH=\"$HOME/Documents/gcc-arm-8.3-2019.03-x86_64-arm-linux-gnueabihf/bin:$PATH\"</span>\n<span class=\"hljs-comment\"># Pi 2/3/4 Example: export PATH=\"$HOME/Documents/gcc-arm-9.2-2019.12-x86_64-arm-none-linux-gnueabihf/bin:$PATH\"</span>\n<span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/PATH_TO_YOUR_DOWNLOAD/PATH_TO_TOOLCHAIN_FOLDER/bin:<span class=\"hljs-variable\">$PATH</span>\"</span>\n</code></pre>\n<h2>Create a Cargo Project</h2>\n<p>It's almost ready! All that's left is to create and configure a cargo project.</p>\n<pre><code class=\"language-bash\">cargo new pi_project\nmkdir pi_project/.cargo\n<span class=\"hljs-built_in\">cd</span> ./pi_project/.cargo\ntouch config.toml\n</code></pre>\n<p>Add the following to <code>pi_project/.cargo/config.toml</code>.</p>\n<pre><code class=\"language-toml\"><span class=\"hljs-section\">[build]</span>\n\n<span class=\"hljs-comment\"># Pi 0/1</span>\n<span class=\"hljs-section\">[target.arm-unknown-linux-gnueabihf]</span>\n<span class=\"hljs-attr\">linker</span> = <span class=\"hljs-string\">\"arm-linux-gnueabihf-gcc\"</span>\n\n<span class=\"hljs-comment\"># Pi 2/3/4</span>\n<span class=\"hljs-section\">[target.armv7-unknown-linux-gnueabihf]</span>\n<span class=\"hljs-attr\">linker</span> = <span class=\"hljs-string\">\"arm-none-linux-gnueabihf-gcc\"</span>\n\n<span class=\"hljs-comment\"># (Optional) Set default target for cargo build</span>\n<span class=\"hljs-comment\"># target = \"armv7-unknown-linux-gnueabihf\"</span>\n<span class=\"hljs-comment\"># rustflags = [\"-C\", \"linker=arm-none-linux-gnueabihf-gcc\"]</span>\n</code></pre>\n<h2>Run your Binary on the Pi</h2>\n<p>Below is a quick example workflow you can use to quickly deploy your project on a Pi.</p>\n<pre><code class=\"language-bash\">PI_IP=192.168.2.159 <span class=\"hljs-comment\"># Be sure to change this!</span>\nTARGET=armv7-unknown-linux-gnueabihf <span class=\"hljs-comment\"># Pi 2/3/4</span>\n<span class=\"hljs-comment\">#TARGET=arm-unknown-linux-gnueabihf # Pi 0/1</span>\n\n<span class=\"hljs-comment\"># build binary</span>\ncargo build --target <span class=\"hljs-variable\">$TARGET</span>\n\n<span class=\"hljs-comment\"># upload binary</span>\nsshpass -p <span class=\"hljs-string\">'raspberry'</span> scp -r ./target/<span class=\"hljs-variable\">$TARGET</span>/debug/pi_project pi@<span class=\"hljs-variable\">$PI_IP</span>:/home/pi\n\n<span class=\"hljs-comment\"># execute binary</span>\nsshpass -p <span class=\"hljs-string\">'raspberry'</span> ssh pi@<span class=\"hljs-variable\">$PI_IP</span> <span class=\"hljs-string\">'./pi_project'</span>\n</code></pre>\n<p>The output should look like this.\n<img src=\"/posts/cross-compiling-rust-for-the-raspberry-pi/demo.png\" alt=\"example output of the Rust program\"></p>\n","date":"2020-1-28","excerpt":"","printDate":"January 28, 2020","printReadingTime":"2 min read"}